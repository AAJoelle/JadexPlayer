<!--
	<H3>Test meta-level reasoning.</H3>

	The capability defines one meta-level goal
	and plan and one application goal and plan.
	At runtime more than one application plan
	is applicable due to the bindings and the
	meta-level goal is created to select between
	the candidates.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	package="jadex.testcases.plans"
	name="MLR">

	<imports>
		<import>jadex.testcases.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>java.util.*</import>
	</imports>

	<beliefs>
		<beliefset name="plans" class="double" exported="true"/>
		<beliefset name="importance" class="double">
			<fact>Math.random()</fact>
			<fact>Math.random()</fact>
			<fact>Math.random()</fact>
			<fact>Math.random()</fact>
		</beliefset>
	</beliefs>

	<goals>
		<achievegoal name="app_goal" exported="true"/>

		<metagoal name="ml_goal" exported="true">
			<parameterset name="applicables" class="ICandidateInfo"/>
			<parameterset name="result" class="ICandidateInfo" direction="out"/>
			<trigger>
				<internalevent ref="testinternalevent"/>
				<messageevent ref="testmessageevent"/>
				<filter>
					new InternalEventFilter("testfilter")
				</filter>
				<goal ref="app_goal"/>
			</trigger>
		</metagoal>
	</goals>

	<plans>
        <plan name="ml_plan">
			<parameterset name="applicables" class="List">
				<goalmapping ref="ml_goal.applicables"/>
			</parameterset>
			<parameterset name="result" class="List">
				<goalmapping ref="ml_goal.result"/>
			</parameterset>
			<body class="MetaLevelReasoningPlan"/>
			<!-- <body>new MetaLevelReasoningPlan()</body> -->
			<trigger>
				<goal ref="ml_goal"/>
			</trigger>
		</plan>

		<plan name="app_plan">
			<parameter name="importance" class="double">
				<bindingoptions>$beliefbase.importance</bindingoptions>
			</parameter>
			<body>new ResultPlan(false, new Double($plan.importance), "plans")</body>
			<trigger>
				<internalevent ref="testinternalevent"/>
				<messageevent ref="testmessageevent"/>
				<filter>
					new InternalEventFilter("testfilter")
				</filter>
				<goal ref="app_goal"/>
			</trigger>
		</plan>
	</plans>
	
	<events>
		<internalevent name="testinternalevent" exported="true"/>
		<internalevent name="testfilter" exported="true"/>
		<messageevent name="testmessageevent" exported="true" type="fipa" direction="send_receive">
			<parameter name="content" class="String" direction="fixed">
				<value>"testcontent"</value>
			</parameter>
		</messageevent>
	</events>
	
</capability>