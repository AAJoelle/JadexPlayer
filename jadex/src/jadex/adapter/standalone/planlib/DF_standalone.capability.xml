<!--
	The df capability has all necessay plans, beliefs and goals for all
	activities concerned with df functionality.
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	package="jadex.adapter.standalone.planlib"
	name="DF_standalone">

	<imports>
		<import>jadex.planlib.*</import>
		<import>jadex.runtime.*</import>
		<import>jadex.util.*</import>
		<import>jadex.adapter.fipa.*</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.planlib.Protocols"/>
	</capabilities>

	<beliefs>
		<!-- Timeout for messages. -->
		<belief name="timeout" class="long"/>
	</beliefs>

	<goals>
		<achievegoal name="df_register" exported="true">
			<parameter name="description" class="AgentDescription"/>
			<parameter name="df" class="AgentIdentifier" optional="true"/>
			<parameter name="leasetime" class="Long" optional="true"/>
			<parameter name="result" class="AgentDescription" direction="out"/>
		</achievegoal>

		<achievegoal name="df_modify" exported="true">
			<parameter name="description" class="AgentDescription"/>
			<parameter name="df" class="AgentIdentifier" optional="true"/>
			<parameter name="leasetime" class="Long" optional="true"/>
			<parameter name="result" class="AgentDescription" direction="out"/>
		</achievegoal>

		<maintaingoal name="df_keep_registered" recurdelay="60000" exported="true">
			<!-- Will contain the actually registered agent description. -->
			<parameter name="description" class="AgentDescription"/>
			<parameter name="df" class="AgentIdentifier" optional="true"/>
			<parameter name="leasetime" class="Long" optional="true">
				<!--<value>20000</value>-->
			</parameter>
			<parameter name="buffertime" class="long">
				<value>3000</value>
			</parameter>
			<parameter name="current_time"  class="long" updaterate="1000">
				<value>System.currentTimeMillis()</value>
			</parameter>
			<parameter name="result" class="AgentDescription" direction="out"/>
			<maintaincondition>
				<!--($goal.result instanceof AgentDescription) Janino bug.-->
				($goal.result != null)
				&amp;&amp;
				($goal.result.getLeaseTime() == null?
 				true: $goal.result.getLeaseTime().getTime()
				- $goal.current_time - $goal.buffertime &gt; 0)
			</maintaincondition>
		</maintaingoal>

		<achievegoal name="df_deregister" exported="true">
			<!-- The agent description to deregister. Null for deregistering the
				agent description of the dispatching agent. -->
			<parameter name="description" class="AgentDescription" optional="true"/>
			<parameter name="df" class="AgentIdentifier" optional="true"/>
		</achievegoal>

		<achievegoal name="df_search" exported="true">
			<parameter name="description" class="AgentDescription"/>
			<parameter name="df" class="AgentIdentifier" optional="true"/>
			<parameter name="constraints" class="SearchConstraints" optional="true"/>
			<parameterset name="result" class="AgentDescription" direction="out"/>
		</achievegoal>

		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>
	</goals>
	
	<plans>
		<plan name="local_register">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_register.description"/>
 				<goalmapping ref="df_keep_registered.description"/>
			</parameter>
			<parameter name="result" class="AgentDescription" direction="out">
 				<goalmapping ref="df_register.result"/>
 				<goalmapping ref="df_keep_registered.result"/>
			</parameter>
			<parameter name="leasetime" class="Long">
 				<goalmapping ref="df_register.leasetime"/>
 				<goalmapping ref="df_keep_registered.leasetime"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_register.df"/>
 				<goalmapping ref="df_keep_registered.df"/>
			</parameter>
			<body class="StandaloneDFLocalRegisterPlan" />
			<!-- <body>new StandaloneDFLocalRegisterPlan()</body> -->
			<trigger>
				<goal ref="df_register"/>
				<goal ref="df_keep_registered"/>
			</trigger>
			<precondition>$goal.df==null</precondition>
		</plan>
		<plan name="local_modify" priority="1"> <!-- higher priority to precede register plan -->
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_modify.description"/>
 				<goalmapping ref="df_keep_registered.description"/>
			</parameter>
			<parameter name="result" class="AgentDescription" direction="out">
 				<goalmapping ref="df_modify.result"/>
 				<goalmapping ref="df_keep_registered.result"/>
			</parameter>
			<parameter name="leasetime" class="Long">
 				<goalmapping ref="df_modify.leasetime"/>
 				<goalmapping ref="df_keep_registered.leasetime"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_modify.df"/>
 				<goalmapping ref="df_keep_registered.df"/>
			</parameter>
			<body class="StandaloneDFLocalModifyPlan" />
			<!-- <body>new StandaloneDFLocalModifyPlan()</body> -->
			<trigger>
				<goal ref="df_modify"/>
				<goal ref="df_keep_registered"/>
			</trigger>
			<precondition>$goal.df==null</precondition>
		</plan>
		<plan name="local_deregister">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_deregister.description"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_deregister.df"/>
			</parameter>
			<body class="StandaloneDFLocalDeregisterPlan" />
			<!-- <body>new StandaloneDFLocalDeregisterPlan()</body> -->
			<trigger>
				<goal ref="df_deregister"/>
			</trigger>
			<precondition>$goal.df==null</precondition>
		</plan>
		<plan name="local_search">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_search.description"/>
			</parameter>
			<parameter name="constraints" class="SearchConstraints">
 				<goalmapping ref="df_search.constraints"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_search.df"/>
			</parameter>
			<parameterset name="result" class="AgentDescription" direction="out">
 				<goalmapping ref="df_search.result"/>
			</parameterset>
			<body class="StandaloneDFLocalSearchPlan" />
			<!-- <body>new StandaloneDFLocalSearchPlan()</body> -->
			<trigger>
				<goal ref="df_search"/>
			</trigger>
			<precondition>$goal.df==null</precondition>
		</plan>

		<!-- remote plans -->

		<plan name="remote_register">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_register.description"/>
 				<goalmapping ref="df_keep_registered.description"/>
			</parameter>
			<parameter name="result" class="AgentDescription">
 				<goalmapping ref="df_register.result"/>
 				<goalmapping ref="df_keep_registered.result"/>
			</parameter>
			<parameter name="leasetime" class="Long">
 				<goalmapping ref="df_register.leasetime"/>
 				<goalmapping ref="df_keep_registered.leasetime"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_register.df"/>
 				<goalmapping ref="df_keep_registered.df"/>
			</parameter>
			<body class="StandaloneDFRemoteRegisterPlan" />
			<!-- <body>new StandaloneDFRemoteRegisterPlan()</body> -->
			<trigger>
				<goal ref="df_register"/>
				<goal ref="df_keep_registered"/>
			</trigger>
			<precondition>$goal.df!=null</precondition>
		</plan>
		<plan name="remote_modify" priority="1"> <!-- higher priority to precede register plan -->
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_modify.description"/>
 				<goalmapping ref="df_keep_registered.description"/>
			</parameter>
			<parameter name="result" class="AgentDescription">
 				<goalmapping ref="df_modify.result"/>
 				<goalmapping ref="df_keep_registered.result"/>
			</parameter>
			<parameter name="leasetime" class="Long">
 				<goalmapping ref="df_modify.leasetime"/>
 				<goalmapping ref="df_keep_registered.leasetime"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_modify.df"/>
 				<goalmapping ref="df_keep_registered.df"/>
			</parameter>
			<body class="StandaloneDFRemoteModifyPlan" />
			<!-- <body>new StandaloneDFRemoteModifyPlan()</body> -->
			<trigger>
				<goal ref="df_modify"/>
				<goal ref="df_keep_registered"/>
			</trigger>
			<precondition>$goal.df!=null</precondition>
		</plan>
		<plan name="remote_deregister">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_deregister.description"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_deregister.df"/>
			</parameter>
			<body class="StandaloneDFRemoteDeregisterPlan" />
			<!-- <body>new StandaloneDFRemoteDeregisterPlan()</body> -->
			<trigger>
				<goal ref="df_deregister"/>
			</trigger>
			<precondition>$goal.df!=null</precondition>
		</plan>
		<plan name="remote_search">
			<parameter name="description" class="AgentDescription">
 				<goalmapping ref="df_search.description"/>
			</parameter>
			<parameter name="constraints" class="SearchConstraints">
 				<goalmapping ref="df_search.constraints"/>
			</parameter>
			<parameter name="df" class="BasicAgentIdentifier">
 				<goalmapping ref="df_search.df"/>
			</parameter>
			<parameterset name="result" class="AgentDescription">
 				<goalmapping ref="df_search.result"/>
			</parameterset>
			<body class="StandaloneDFRemoteSearchPlan" />
			<!-- <body>new StandaloneDFRemoteSearchPlan()</body> -->
			<trigger>
				<goal ref="df_search"/>
			</trigger>
			<precondition>$goal.df!=null</precondition>
		</plan>
	</plans>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="timeout">
					<fact>(Integer)$propertybase.getProperty("standard.timeout")</fact>
				</initialbelief>
			</beliefs>
		</configuration>
		<configuration name="without_timeouts">
		</configuration>
	</configurations>

</capability>
