/*
 * Property.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package jadex.adapter.fipa;



/**
 *  Java class for concept Property of beanynizer_beans_fipa_default ontology.
 */
public class Property extends PropertyData
{
	//-------- constants ----------

	//-------- attributes ----------
	
	/** Attribute needed for o/r-mapping. */
	protected Long propertyId;

	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>Property</code>.
	 */
	public Property()  {
	}

	/**
	 *  Init Constructor. <br>
	 *  Create a new Property.<br>
	 *  Initializes the object with required attributes.
	 * @param name
	 * @param value
	 */
	public Property(String name, Object value)  {
		this();
		setName(name);
		setValue(value);
	}

	//-------- methods for o/r-mapping --------
	
	/**
	 * Returns the id of the property needed for o/r-mapping.
	 * @return the propertyId
	 */
	protected Long getPropertyId()
	{
		return propertyId;
	}

	/**
	 * Sets the id of the property needed for o/r-mapping.
	 * @param propertyId the propertyId to set
	 */
	protected void setPropertyId(Long propertyId)
	{
		this.propertyId = propertyId;
	}
	
	/**
	 * Returns the string representation of the value or null if it is instanceof String. 
	 * @return String representation of value
	 */
	protected String getValueObject()
	{
		if(value==null)
			return null;
		if(value instanceof String)
			return null;
		return nuggets.Nuggets.objectToXML(value);		
	}
	
	/**
	 * Set the value, given a String represantation of an Object.
	 * @param valueObject the String representation of the Object
	 */
	protected void setValueObject(String valueObject)
	{
		this.value = valueObject == null ? null : nuggets.Nuggets.objectFromXML(valueObject);
	}
	
	/**
	 * Returns the String if value is instanceof String, else returns null.
	 * @return the value casted to String
	 */
	protected String getValueString()
	{
		if(value==null)
			return null;
		if(value instanceof String)
			return (String) this.value;
		return null;
	}
	
	/**
	 * Set a String value.
	 * @param valueString the String to set.
	 */
	protected void setValueString(String valueString)
	{
		this.value = valueString;
	}

	//-------- additional methods --------

	/**
	 *  Get a string representation of this Property.
	 *  @return The string representation.
	 */
	public String toString() {
		return "Property("
		+ "name="+getName()
		+ ", value="+getValue()
           + ")";
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	public boolean equals(Object obj)
	{
		if(obj == null)
			return false;
		if(obj instanceof Property)
		{
			Property that = (Property) obj;
			return this.getName().equals(that.getName()) && this.getValue().equals(that.getValue());
		}
		else
			return false;
	}	
}
