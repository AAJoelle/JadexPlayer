/*
 * AgentIdentifierData.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package jadex.adapter.fipa;

import java.util.ArrayList;
import java.util.List;


/**
 *  Java class for concept AgentIdentifier of beanynizer_beans_fipa_default ontology.
 */
public abstract class AgentIdentifierData	extends jadex.runtime.BasicAgentIdentifier implements java.beans.BeanInfo , java.io.Serializable 
{
	//-------- constants ----------

	//-------- attributes ----------

	/** Attribute for slot addresses. */
	protected  List  addresses;

	/** Attribute for slot resolvers. */
	protected  List  resolvers;


	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>AgentIdentifier</code>.
	 */
	public AgentIdentifierData()  {
		this.addresses  = new ArrayList();
		this.resolvers  = new ArrayList();
	}

	//-------- accessor methods --------

	/**
	 *  Get the addresses of this AgentIdentifier.
	 * @return addresses
	 */
	public String[]  getAddresses() {
		return (String[])addresses.toArray(new String [addresses.size()]);
	}

	/**
	 *  Set the addresses of this AgentIdentifier.
	 * @param addresses the value to be set
	 */
	public void  setAddresses(String[] addresses) {
		this.addresses.clear();
		for(int i=0; i<addresses.length; i++)
			this.addresses.add(addresses[i]);
	}

	/**
	 *  Get an addresses of this AgentIdentifier.
	 *  @param idx The index.
	 *  @return addresses
	 */
	public String  getAddress(int idx) {
		return (String)this.addresses.get(idx);
	}

	/**
	 *  Set a address to this AgentIdentifier.
	 *  @param idx The index.
	 *  @param address a value to be added
	 */
	public void  setAddress(int idx, String address) {
		this.addresses.set(idx, address);
	}

	/**
	 *  Add a address to this AgentIdentifier.
	 *  @param address a value to be removed
	 */
	public void  addAddress(String address)  {
		this.addresses.add(address);
	}

	/**
	 *  Remove a address from this AgentIdentifier.
	 *  @param address a value to be removed
	 *  @return  True when the addresses have changed.
	 */
	public boolean  removeAddress(String address)  {
		return this.addresses.remove(address);
	}


	/**
	 *  Get the resolvers of this AgentIdentifier.
	 * @return resolvers
	 */
	public AgentIdentifier[]  getResolvers() {
		return (AgentIdentifier[])resolvers.toArray(new AgentIdentifier [resolvers.size()]);
	}

	/**
	 *  Set the resolvers of this AgentIdentifier.
	 * @param resolvers the value to be set
	 */
	public void  setResolvers(AgentIdentifier[] resolvers) {
		this.resolvers.clear();
		for(int i=0; i<resolvers.length; i++)
			this.resolvers.add(resolvers[i]);
	}

	/**
	 *  Get an resolvers of this AgentIdentifier.
	 *  @param idx The index.
	 *  @return resolvers
	 */
	public AgentIdentifier  getResolver(int idx) {
		return (AgentIdentifier)this.resolvers.get(idx);
	}

	/**
	 *  Set a resolver to this AgentIdentifier.
	 *  @param idx The index.
	 *  @param resolver a value to be added
	 */
	public void  setResolver(int idx, AgentIdentifier resolver) {
		this.resolvers.set(idx, resolver);
	}

	/**
	 *  Add a resolver to this AgentIdentifier.
	 *  @param resolver a value to be removed
	 */
	public void  addResolver(AgentIdentifier resolver)  {
		this.resolvers.add(resolver);
	}

	/**
	 *  Remove a resolver from this AgentIdentifier.
	 *  @param resolver a value to be removed
	 *  @return  True when the resolvers have changed.
	 */
	public boolean  removeResolver(AgentIdentifier resolver)  {
		return this.resolvers.remove(resolver);
	}


	//-------- bean related methods --------

	/** The property descriptors, constructed on first access. */
	private java.beans.PropertyDescriptor[] pds = null;

	/**
	 *  Get the bean descriptor.
	 *  @return The bean descriptor.
	 */
	public java.beans.BeanDescriptor getBeanDescriptor() {
		return null;
	}

	/**
	 *  Get the property descriptors.
	 *  @return The property descriptors.
	 */
	public java.beans.PropertyDescriptor[] getPropertyDescriptors() {
		if(pds==null) {
			try {
				pds = new java.beans.PropertyDescriptor[]{
					 new java.beans.IndexedPropertyDescriptor("addresses", this.getClass(),
						"getAddresses", "setAddresses", "getAddress", "setAddress")
					, new java.beans.IndexedPropertyDescriptor("resolvers", this.getClass(),
						"getResolvers", "setResolvers", "getResolver", "setResolver")
					, new java.beans.PropertyDescriptor("name", this.getClass(), "getName", "setName")
				};
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		return pds;
	}

	/**
	 *  Get the default property index.
	 *  @return The property index.
	 */
	public int getDefaultPropertyIndex() {
		return -1;
	}

	/**
	 *  Get the event set descriptors.
	 *  @return The event set descriptors.
	 */
	public java.beans.EventSetDescriptor[] getEventSetDescriptors() {
		return null;
	}

	/**
	 *  Get the default event index.
	 *  @return The default event index.
	 */
	public int getDefaultEventIndex() {
		return -1;
	}

	/**
	 *  Get the method descriptors.
	 *  @return The method descriptors.
	 */
	public java.beans.MethodDescriptor[] getMethodDescriptors() {
		return null;
	}

	/**
	 *  Get additional bean info.
	 *  @return Get additional bean info.
	 */
	public java.beans.BeanInfo[] getAdditionalBeanInfo() {
		return null;
	}

	/**
	 *  Get the icon.
	 *  @return The icon.
	 */
	public java.awt.Image getIcon(int iconKind) {
		return null;
	}

	/**
	 *  Load the image.
	 *  @return The image.
	 */
	public java.awt.Image loadImage(final String resourceName) {
		try {
			final Class c = getClass();
			java.awt.image.ImageProducer ip = (java.awt.image.ImageProducer)
				java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
					public Object run(){
						java.net.URL url;
						if((url = c.getResource(resourceName))==null) {
							return null;
						}
						else {
							try {
								return url.getContent();
							}
							catch(java.io.IOException ioe) {
								return null;
							}
						}
					}
				});
			if(ip==null)
				return null;
			java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
			return tk.createImage(ip);
		}
		catch(Exception ex) {
			return null;
		}
	}

	//-------- additional methods --------

	/**
	 *  Get a string representation of this AgentIdentifier.
	 *  @return The string representation.
	 */
	public String toString() {
		return "AgentIdentifier("
		+ "name="+getName()
           + ")";
	}

}
