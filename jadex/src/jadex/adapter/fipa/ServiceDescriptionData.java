/*
 * ServiceDescriptionData.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package jadex.adapter.fipa;

import java.util.ArrayList;
import java.util.List;


/**
 *  Java class for concept ServiceDescription of beanynizer_beans_fipa_default ontology.
 */
public abstract class ServiceDescriptionData implements java.beans.BeanInfo , java.io.Serializable 
{
	//-------- constants ----------

	//-------- attributes ----------

	/** Attribute for slot languages. */
	protected  List  languages;

	/** Attribute for slot type. */
	protected  String  type;

	/** Attribute for slot properties. */
	protected  List  properties;

	/** Attribute for slot name. */
	protected  String  name;

	/** Attribute for slot ontologies. */
	protected  List  ontologies;

	/** Attribute for slot ownership. */
	protected  String  ownership;

	/** Attribute for slot protocols. */
	protected  List  protocols;

	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>ServiceDescription</code>.
	 */
	public ServiceDescriptionData()  {
		this.languages  = new ArrayList();
		this.properties  = new ArrayList();
		this.ontologies  = new ArrayList();
		this.protocols  = new ArrayList();
	}

	//-------- accessor methods --------

	/**
	 *  Get the languages of this ServiceDescription.
	 * @return languages
	 */
	public String[]  getLanguages() {
		return (String[])languages.toArray(new String [languages.size()]);
	}

	/**
	 *  Set the languages of this ServiceDescription.
	 * @param languages the value to be set
	 */
	public void  setLanguages(String[] languages) {
		this.languages.clear();
		for(int i=0; i<languages.length; i++)
			this.languages.add(languages[i]);
	}

	/**
	 *  Get an languages of this ServiceDescription.
	 *  @param idx The index.
	 *  @return languages
	 */
	public String  getLanguage(int idx) {
		return (String)this.languages.get(idx);
	}

	/**
	 *  Set a language to this ServiceDescription.
	 *  @param idx The index.
	 *  @param language a value to be added
	 */
	public void  setLanguage(int idx, String language) {
		this.languages.set(idx, language);
	}

	/**
	 *  Add a language to this ServiceDescription.
	 *  @param language a value to be removed
	 */
	public void  addLanguage(String language)  {
		this.languages.add(language);
	}

	/**
	 *  Remove a language from this ServiceDescription.
	 *  @param language a value to be removed
	 *  @return  True when the languages have changed.
	 */
	public boolean  removeLanguage(String language)  {
		return this.languages.remove(language);
	}


	/**
	 *  Get the type of this ServiceDescription.
	 * @return type
	 */
	public String  getType() {
		return this.type;
	}

	/**
	 *  Set the type of this ServiceDescription.
	 * @param type the value to be set
	 */
	public void  setType(String type) {
		this.type = type;
	}

	/**
	 *  Get the properties of this ServiceDescription.
	 * @return properties
	 */
	public Property[]  getProperties() {
		return (Property[])properties.toArray(new Property [properties.size()]);
	}

	/**
	 *  Set the properties of this ServiceDescription.
	 * @param properties the value to be set
	 */
	public void  setProperties(Property[] properties) {
		this.properties.clear();
		for(int i=0; i<properties.length; i++)
			this.properties.add(properties[i]);
	}

	/**
	 *  Get an properties of this ServiceDescription.
	 *  @param idx The index.
	 *  @return properties
	 */
	public Property  getProperty(int idx) {
		return (Property)this.properties.get(idx);
	}

	/**
	 *  Set a property to this ServiceDescription.
	 *  @param idx The index.
	 *  @param property a value to be added
	 */
	public void  setProperty(int idx, Property property) {
		this.properties.set(idx, property);
	}

	/**
	 *  Add a property to this ServiceDescription.
	 *  @param property a value to be removed
	 */
	public void  addProperty(Property property)  {
		this.properties.add(property);
	}

	/**
	 *  Remove a property from this ServiceDescription.
	 *  @param property a value to be removed
	 *  @return  True when the properties have changed.
	 */
	public boolean  removeProperty(Property property)  {
		return this.properties.remove(property);
	}


	/**
	 *  Get the name of this ServiceDescription.
	 * @return name
	 */
	public String  getName() {
		return this.name;
	}

	/**
	 *  Set the name of this ServiceDescription.
	 * @param name the value to be set
	 */
	public void  setName(String name) {
		this.name = name;
	}

	/**
	 *  Get the ontologies of this ServiceDescription.
	 * @return ontologies
	 */
	public String[]  getOntologies() {
		return (String[])ontologies.toArray(new String [ontologies.size()]);
	}

	/**
	 *  Set the ontologies of this ServiceDescription.
	 * @param ontologies the value to be set
	 */
	public void  setOntologies(String[] ontologies) {
		this.ontologies.clear();
		for(int i=0; i<ontologies.length; i++)
			this.ontologies.add(ontologies[i]);
	}

	/**
	 *  Get an ontologies of this ServiceDescription.
	 *  @param idx The index.
	 *  @return ontologies
	 */
	public String  getOntology(int idx) {
		return (String)this.ontologies.get(idx);
	}

	/**
	 *  Set a ontology to this ServiceDescription.
	 *  @param idx The index.
	 *  @param ontology a value to be added
	 */
	public void  setOntology(int idx, String ontology) {
		this.ontologies.set(idx, ontology);
	}

	/**
	 *  Add a ontology to this ServiceDescription.
	 *  @param ontology a value to be removed
	 */
	public void  addOntology(String ontology)  {
		this.ontologies.add(ontology);
	}

	/**
	 *  Remove a ontology from this ServiceDescription.
	 *  @param ontology a value to be removed
	 *  @return  True when the ontologies have changed.
	 */
	public boolean  removeOntology(String ontology)  {
		return this.ontologies.remove(ontology);
	}


	/**
	 *  Get the ownership of this ServiceDescription.
	 * @return ownership
	 */
	public String  getOwnership() {
		return this.ownership;
	}

	/**
	 *  Set the ownership of this ServiceDescription.
	 * @param ownership the value to be set
	 */
	public void  setOwnership(String ownership) {
		this.ownership = ownership;
	}

	/**
	 *  Get the protocols of this ServiceDescription.
	 * @return protocols
	 */
	public String[]  getProtocols() {
		return (String[])protocols.toArray(new String [protocols.size()]);
	}

	/**
	 *  Set the protocols of this ServiceDescription.
	 * @param protocols the value to be set
	 */
	public void  setProtocols(String[] protocols) {
		this.protocols.clear();
		for(int i=0; i<protocols.length; i++)
			this.protocols.add(protocols[i]);
	}

	/**
	 *  Get an protocols of this ServiceDescription.
	 *  @param idx The index.
	 *  @return protocols
	 */
	public String  getProtocol(int idx) {
		return (String)this.protocols.get(idx);
	}

	/**
	 *  Set a protocol to this ServiceDescription.
	 *  @param idx The index.
	 *  @param protocol a value to be added
	 */
	public void  setProtocol(int idx, String protocol) {
		this.protocols.set(idx, protocol);
	}

	/**
	 *  Add a protocol to this ServiceDescription.
	 *  @param protocol a value to be removed
	 */
	public void  addProtocol(String protocol)  {
		this.protocols.add(protocol);
	}

	/**
	 *  Remove a protocol from this ServiceDescription.
	 *  @param protocol a value to be removed
	 *  @return  True when the protocols have changed.
	 */
	public boolean  removeProtocol(String protocol)  {
		return this.protocols.remove(protocol);
	}


	//-------- bean related methods --------

	/** The property descriptors, constructed on first access. */
	private java.beans.PropertyDescriptor[] pds = null;

	/**
	 *  Get the bean descriptor.
	 *  @return The bean descriptor.
	 */
	public java.beans.BeanDescriptor getBeanDescriptor() {
		return null;
	}

	/**
	 *  Get the property descriptors.
	 *  @return The property descriptors.
	 */
	public java.beans.PropertyDescriptor[] getPropertyDescriptors() {
		if(pds==null) {
			try {
				pds = new java.beans.PropertyDescriptor[]{
					 new java.beans.IndexedPropertyDescriptor("languages", this.getClass(),
						"getLanguages", "setLanguages", "getLanguage", "setLanguage")
					, new java.beans.PropertyDescriptor("type", this.getClass(), "getType", "setType")
					, new java.beans.IndexedPropertyDescriptor("properties", this.getClass(),
						"getProperties", "setProperties", "getProperty", "setProperty")
					, new java.beans.PropertyDescriptor("name", this.getClass(), "getName", "setName")
					, new java.beans.IndexedPropertyDescriptor("ontologies", this.getClass(),
						"getOntologies", "setOntologies", "getOntology", "setOntology")
					, new java.beans.PropertyDescriptor("ownership", this.getClass(), "getOwnership", "setOwnership")
					, new java.beans.IndexedPropertyDescriptor("protocols", this.getClass(),
						"getProtocols", "setProtocols", "getProtocol", "setProtocol")
				};
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		return pds;
	}

	/**
	 *  Get the default property index.
	 *  @return The property index.
	 */
	public int getDefaultPropertyIndex() {
		return -1;
	}

	/**
	 *  Get the event set descriptors.
	 *  @return The event set descriptors.
	 */
	public java.beans.EventSetDescriptor[] getEventSetDescriptors() {
		return null;
	}

	/**
	 *  Get the default event index.
	 *  @return The default event index.
	 */
	public int getDefaultEventIndex() {
		return -1;
	}

	/**
	 *  Get the method descriptors.
	 *  @return The method descriptors.
	 */
	public java.beans.MethodDescriptor[] getMethodDescriptors() {
		return null;
	}

	/**
	 *  Get additional bean info.
	 *  @return Get additional bean info.
	 */
	public java.beans.BeanInfo[] getAdditionalBeanInfo() {
		return null;
	}

	/**
	 *  Get the icon.
	 *  @return The icon.
	 */
	public java.awt.Image getIcon(int iconKind) {
		return null;
	}

	/**
	 *  Load the image.
	 *  @return The image.
	 */
	public java.awt.Image loadImage(final String resourceName) {
		try {
			final Class c = getClass();
			java.awt.image.ImageProducer ip = (java.awt.image.ImageProducer)
				java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
					public Object run(){
						java.net.URL url;
						if((url = c.getResource(resourceName))==null) {
							return null;
						}
						else {
							try {
								return url.getContent();
							}
							catch(java.io.IOException ioe) {
								return null;
							}
						}
					}
				});
			if(ip==null)
				return null;
			java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
			return tk.createImage(ip);
		}
		catch(Exception ex) {
			return null;
		}
	}

	//-------- additional methods --------

	/**
	 *  Get a string representation of this ServiceDescription.
	 *  @return The string representation.
	 */
	public String toString() {
		return "ServiceDescription("
           + ")";
	}

}
