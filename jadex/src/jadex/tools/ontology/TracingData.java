/*
 * TracingData.java
 *
 * Generated by Protege plugin Beanynizer. 
 * Changes will be lost! 
 */
package jadex.tools.ontology;



/**
 *  Java class for concept Tracing of jadex.tools.tracer ontology.
 */
public abstract class TracingData	extends Predicate implements java.beans.BeanInfo 
{
	//-------- constants ----------

	//-------- attributes ----------

	/** Attribute for slot belief_writes. */
	protected  boolean  beliefwrites  = false;

	/** Attribute for slot belief_reads. */
	protected  boolean  beliefreads  = false;

	/** Attribute for slot actions. */
	protected  boolean  actions  = false;

	/** Attribute for slot plans. */
	protected  boolean  plans  = false;

	/** Attribute for slot goals. */
	protected  boolean  goals  = false;

	/** Attribute for slot messages. */
	protected  boolean  messages  = false;

	/** Attribute for slot events. */
	protected  boolean  events  = false;

	//-------- constructors --------

	/**
	 *  Default Constructor. <br>
	 *  Create a new <code>Tracing</code>.
	 */
	public TracingData()  {
	}

	//-------- accessor methods --------

	/**
	 *  Get the belief_writes of this Tracing.
	 * @return belief_writes
	 */
	public boolean  isBeliefWrites() {
		return this.beliefwrites;
	}

	/**
	 *  Set the belief_writes of this Tracing.
	 * @param beliefwrites the value to be set
	 */
	public void  setBeliefWrites(boolean beliefwrites) {
		this.beliefwrites = beliefwrites;
	}

	/**
	 *  Get the belief_reads of this Tracing.
	 * @return belief_reads
	 */
	public boolean  isBeliefReads() {
		return this.beliefreads;
	}

	/**
	 *  Set the belief_reads of this Tracing.
	 * @param beliefreads the value to be set
	 */
	public void  setBeliefReads(boolean beliefreads) {
		this.beliefreads = beliefreads;
	}

	/**
	 *  Get the actions of this Tracing.
	 * @return actions
	 */
	public boolean  isActions() {
		return this.actions;
	}

	/**
	 *  Set the actions of this Tracing.
	 * @param actions the value to be set
	 */
	public void  setActions(boolean actions) {
		this.actions = actions;
	}

	/**
	 *  Get the plans of this Tracing.
	 * @return plans
	 */
	public boolean  isPlans() {
		return this.plans;
	}

	/**
	 *  Set the plans of this Tracing.
	 * @param plans the value to be set
	 */
	public void  setPlans(boolean plans) {
		this.plans = plans;
	}

	/**
	 *  Get the goals of this Tracing.
	 * @return goals
	 */
	public boolean  isGoals() {
		return this.goals;
	}

	/**
	 *  Set the goals of this Tracing.
	 * @param goals the value to be set
	 */
	public void  setGoals(boolean goals) {
		this.goals = goals;
	}

	/**
	 *  Get the messages of this Tracing.
	 * @return messages
	 */
	public boolean  isMessages() {
		return this.messages;
	}

	/**
	 *  Set the messages of this Tracing.
	 * @param messages the value to be set
	 */
	public void  setMessages(boolean messages) {
		this.messages = messages;
	}

	/**
	 *  Get the events of this Tracing.
	 * @return events
	 */
	public boolean  isEvents() {
		return this.events;
	}

	/**
	 *  Set the events of this Tracing.
	 * @param events the value to be set
	 */
	public void  setEvents(boolean events) {
		this.events = events;
	}

	//-------- bean related methods --------

	/** The property descriptors, constructed on first access. */
	private java.beans.PropertyDescriptor[] pds = null;

	/**
	 *  Get the bean descriptor.
	 *  @return The bean descriptor.
	 */
	public java.beans.BeanDescriptor getBeanDescriptor() {
		return null;
	}

	/**
	 *  Get the property descriptors.
	 *  @return The property descriptors.
	 */
	public java.beans.PropertyDescriptor[] getPropertyDescriptors() {
		if(pds==null) {
			try {
				pds = new java.beans.PropertyDescriptor[]{
					 new java.beans.PropertyDescriptor("beliefWrites", this.getClass(), "isBeliefWrites", "setBeliefWrites")
					, new java.beans.PropertyDescriptor("beliefReads", this.getClass(), "isBeliefReads", "setBeliefReads")
					, new java.beans.PropertyDescriptor("actions", this.getClass(), "isActions", "setActions")
					, new java.beans.PropertyDescriptor("plans", this.getClass(), "isPlans", "setPlans")
					, new java.beans.PropertyDescriptor("goals", this.getClass(), "isGoals", "setGoals")
					, new java.beans.PropertyDescriptor("messages", this.getClass(), "isMessages", "setMessages")
					, new java.beans.PropertyDescriptor("events", this.getClass(), "isEvents", "setEvents")
				};
				java.beans.PropertyDescriptor[] spds = super.getPropertyDescriptors();
				int	l1	= pds.length;
				int	l2	= spds.length;
				Object	res	= java.lang.reflect.Array.newInstance(java.beans.PropertyDescriptor.class, l1+l2);
				System.arraycopy(pds, 0, res, 0, l1);
				System.arraycopy(spds, 0, res, l1, l2);
				pds = (java.beans.PropertyDescriptor[])res;
			}
			catch(Exception e) {
				e.printStackTrace();
			}
		}
		return pds;
	}

	/**
	 *  Get the default property index.
	 *  @return The property index.
	 */
	public int getDefaultPropertyIndex() {
		return -1;
	}

	/**
	 *  Get the event set descriptors.
	 *  @return The event set descriptors.
	 */
	public java.beans.EventSetDescriptor[] getEventSetDescriptors() {
		return null;
	}

	/**
	 *  Get the default event index.
	 *  @return The default event index.
	 */
	public int getDefaultEventIndex() {
		return -1;
	}

	/**
	 *  Get the method descriptors.
	 *  @return The method descriptors.
	 */
	public java.beans.MethodDescriptor[] getMethodDescriptors() {
		return null;
	}

	/**
	 *  Get additional bean info.
	 *  @return Get additional bean info.
	 */
	public java.beans.BeanInfo[] getAdditionalBeanInfo() {
		return null;
	}

	/**
	 *  Get the icon.
	 *  @return The icon.
	 */
	public java.awt.Image getIcon(int iconKind) {
		return null;
	}

	/**
	 *  Load the image.
	 *  @return The image.
	 */
	public java.awt.Image loadImage(final String resourceName) {
		try {
			final Class c = getClass();
			java.awt.image.ImageProducer ip = (java.awt.image.ImageProducer)
				java.security.AccessController.doPrivileged(new java.security.PrivilegedAction() {
					public Object run(){
						java.net.URL url;
						if((url = c.getResource(resourceName))==null) {
							return null;
						}
						else {
							try {
								return url.getContent();
							}
							catch(java.io.IOException ioe) {
								return null;
							}
						}
					}
				});
			if(ip==null)
				return null;
			java.awt.Toolkit tk = java.awt.Toolkit.getDefaultToolkit();
			return tk.createImage(ip);
		}
		catch(Exception ex) {
			return null;
		}
	}

	//-------- additional methods --------

	/**
	 *  Get a string representation of this Tracing.
	 *  @return The string representation.
	 */
	public String toString() {
		return "Tracing("
		+ "actions="+isActions()
		+ ", beliefreads="+isBeliefReads()
		+ ", beliefwrites="+isBeliefWrites()
		+ ", events="+isEvents()
		+ ", goals="+isGoals()
		+ ", messages="+isMessages()
		+ ", plans="+isPlans()
           + ")";
	}

}
