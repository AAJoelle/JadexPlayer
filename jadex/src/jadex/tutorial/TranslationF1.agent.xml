<!--
	<H3>TranslationAgent: Lesson F1.</H3>
	Using internal events to broadcast information.
	<H4>Explanation</H4>
	The agent creates a gui and visualizes issued
	translation requests.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex 
	                    http://jadex.sourceforge.net/jadex-0.96.xsd"
	name="TranslationF1"
	package="jadex.tutorial">

	<imports>
		<import>java.util.logging.*</import>
		<import>jadex.adapter.fipa.*</import>
		<import>jadex.util.*</import>
	</imports>

	<beliefs>
		<!-- This beliefset contains the english-german dictionary as facts. -->
		<beliefset name="egwords" class="Tuple">
			<fact>new Tuple("milk", "Milch")</fact>
			<fact>new Tuple("cow", "Kuh")</fact>
			<fact>new Tuple("cat", "Katze")</fact>
			<fact>new Tuple("dog", "Hund")</fact>
		</beliefset>
	</beliefs>

	<plans>
		<!-- Passive plan for translating words, when a request
			translation message is received. -->
		<plan name="egtrans">
			<body class="EnglishGermanTranslationPlanF1"/>
			<!-- <body>new EnglishGermanTranslationPlanF1()</body> -->
			<trigger>
				<messageevent ref="request_translation"/>
			</trigger>
		</plan>
		<!-- Initial plan for creating and updating the gui. -->
		<plan name="gui">
			<body class="GUIPlanF1"/>
			<!-- <body>new GUIPlanF1()</body> -->
		</plan>
	</plans>

	<events>
		<!-- Specifies an internal event for updating the gui.-->
		<internalevent name="gui_update">
			<parameter name="content" class="String[]"/>
		</internalevent>
		<!-- Specifies a translation request being all messages with performative
			request and start with a specific string "translate english_german". -->
		<messageevent name="request_translation" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="content-start" class="String" direction="fixed">
				<value>"translate english_german"</value>
			</parameter>
		</messageevent>
	</events>

	<properties>
 		<!-- Only log outputs >= level are printed. -->
       <property name="logging.level">Level.INFO</property>
 		<!-- The default parent handler prints out log messages on the console. -->
       <property name="logging.useParentHandlers">true</property>
    </properties>

	<configurations>
		<configuration name="default">
			<plans>
				<initialplan ref="gui"/>
			</plans>
		</configuration>
	</configurations>

</agent>

